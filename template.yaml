AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Contains StageA StateMachine Definition

Parameters:
  pArtifactsBucket:
    Description: S3 Artifacts bucket
    Type: AWS::SSM::Parameter::Value<String>
    Default: /SDLF/S3/ArtifactsBucket
  pDatasetBucket:
    Description: The dataset bucket
    Type: String
  pStageBucket:
    Description: The stage bucket
    Type: String
  pApp:
    Description: Name of the application (all lowercase, no symbols or spaces)
    Type: String
    AllowedPattern: "[a-z0-9]*"
  pOrg:
    Description: Name of the organization (all lowercase, no symbols or spaces)
    Type: String
    AllowedPattern: "[a-z0-9]*"
  pTeamName:
    Description: Name of the team owning the pipeline (all lowercase, no symbols or spaces)
    Type: String
    AllowedPattern: "[a-z0-9]*"
  pPermissionsBoundaryManagedPolicy:
    Description: The permissions boundary IAM Managed policy for the team
    Type: String
  pPipeline:
    Description: The name of the pipeline (all lowercase, no symbols or spaces)
    Type: String
    AllowedPattern: '[a-z0-9_-]{2,20}'
  pEnv:
    Description: The name of the environment to deploy the pipeline to
    Type: String
    Default: dev
    AllowedValues: [dev, test, prod]
  pKMSInfraKeyId:
    Description: The team infrastructure KMS key
    Type: String
  pKMSDataKeyId:
    Description: The team data KMS key
    Type: String
  pDatalakeLibLayer:
    Type: AWS::SSM::Parameter::Value<String>
    Description: The ARN of the latest Datalake Library Lambda Layer
  pPipLibLayer:
    Type: AWS::SSM::Parameter::Value<String>
    Description: The ARN of the latest Pip Library Lambda Layer
  pElasticSearchEnabled:
    Description: Boolean for wether ElasticSearch is enabled
    Type: AWS::SSM::Parameter::Value<String>
    Default: /SDLF/ElasticSearch/Enabled
  pUpdateSubscriptionLambda:
    Description: ARN of the Lambda function used by the Custom Resource to update CloudWatch subscription filters
    Type: AWS::SSM::Parameter::Value<String>
    Default: /SDLF/Lambda/UpdateCloudWatchSubscriptionFilterFunctionArn
  pKibanaFunction:
    Description: ARN of the Lambda function that collates logs
    Type: AWS::SSM::Parameter::Value<String>
    Default: /SDLF/Lambda/KibanaLambdaArn
  pStatesExecutionRole:
    Type: AWS::SSM::Parameter::Value<String>
  pSNSTopic:
    Description: The team SNS topic
    Type: String
  pCloudWatchLogsRetentionInDays:
    Description: The number of days log events are kept in CloudWatch Logs
    Type: Number
    Default: 30
    AllowedValues:
      [
        1,
        3,
        5,
        7,
        14,
        30,
        60,
        90,
        120,
        150,
        180,
        365,
        400,
        545,
        731,
        1827,
        3653,
      ]
  pEnableTracing:
    Description: Flag for whether XRay tracing is enabled
    Type: String

Conditions:
  DeployElasticSearch: !Equals [!Ref pElasticSearchEnabled, "true"]
  EnableTracing: !Equals [!Ref pEnableTracing, "true"]

Globals:
  Function:
    Runtime: python3.9
    Handler: lambda_function.lambda_handler
    Layers:
      - !Ref pDatalakeLibLayer
    KmsKeyArn: !Ref pKMSInfraKeyId

Resources:
  ######## SQS #########


  ######## IAM #########
  rLambdaCommonPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub sdlf-${pTeamName}-${pPipeline}-common-b-cdc
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
            Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/sdlf-${pTeamName}-*
          - Effect: Allow
            Action:
              - ssm:GetParameter
              - ssm:GetParameters
            Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/SDLF/*
          - Effect: Allow
            Action:
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
              - dynamodb:DeleteItem
              - dynamodb:DescribeTable
              - dynamodb:GetItem
              - dynamodb:GetRecords
              - dynamodb:PutItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:UpdateItem
            Resource:
              - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/octagon-*
              - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/sdlf-*
          - Effect: Allow
            Action:
              - kms:CreateGrant
              - kms:Decrypt
              - kms:DescribeKey
              - kms:Encrypt
              - kms:GenerateDataKey*
              - kms:ReEncrypt*
            Resource:
              - !Ref pKMSInfraKeyId
  
   # Gettables Role
  rLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub sdlf-${pTeamName}-${pPipeline}-stage-b-lambda-role
      ManagedPolicyArns:
        - !Ref rLambdaCommonPolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Sub sdlf-${pTeamName}-${pPipeline}-stage-b
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                - s3:Get*
                - s3:Put*
                - s3:List*
                - s3:AbortMultipartUpload
                - s3:DeleteObject
                # - athena:*
                - athena:StartQueryExecution
                - athena:StopQueryExecution
                - athena:GetQueryExecution
                - athena:GetQueryResults
                - athena:GetWorkGroup
                # - glue:*
                - glue:DeleteTable
                - glue:CreateTable
                - glue:UpdateTable
                - glue:GetTable
                - glue:GetPartitions
                - glue:GetDatabase
                - glue:GetPartition
                - glue:BatchCreatePartition
                - lakeformation:GetDataAccess
                - sqs:ReceiveMessage
                - sqs:DeleteMessage
                - sqs:GetQueueAttributes
                - sqs:SendMessage
                - sqs:ChangeMessageVisibility
                - emr-serverless:StartJobRun
                - iam:PassRole
                - emr-serverless:GetJobRun
                Resource:
                  "*"
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource: !Sub arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:sdlf-${pTeamName}-${pPipeline}-sm-b*

  rEMRServerlessRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub sdlf-${pTeamName}-${pPipeline}-stage-b-emr-serverless-role
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: emr-serverless.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Sub sdlf-${pTeamName}-${pPipeline}-stage-b-emr-serverless-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                - s3:GetObject
                - s3:PutObject
                - s3:ListBucket
                - s3:DeleteObject
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                - emr-serverless:StartApplication
                - emr-serverless:StopApplication
                - emr-serverless:GetApplication
                - emr-serverless:ListApplications
                - emr-serverless:StartJobRun
                - emr-serverless:GetJobRun
                - emr-serverless:ListJobRuns
                - glue:*
                Resource:
                  "*"

   ######## LAMBDA FUNCTIONS #########
  rSendS3EventsToFIFOQueueLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./lambda/send-s3-events-to-fifo-queue/src
      FunctionName: !Sub sdlf-${pTeamName}-${pPipeline}-stage-b-send-events-to-queue
      Environment:
        Variables:
          AthenaBucket: !Sub "{{resolve:ssm:/SDLF/S3/AthenaBucket:1}}"
          ENV: !Sub ${pEnv}
          AID: !Sub "${AWS::AccountId}"
          REG: !Sub "${AWS::Region}"
          stage: !Sub guay_jocker_db_${pEnv}_stage
          dwh: !Sub dwh_${pEnv}_guay
          ARTIFACTORY_BUCKET_NAME: !Sub guay-datalake-${pEnv}-${AWS::Region}-${AWS::AccountId}-artifactory
          STAGE_BUCKET_NAME: !Sub guay-datalake-${pEnv}-${AWS::Region}-${AWS::AccountId}-stage
          SQS_QUEUE_URL: !Sub https://sqs.${AWS::Region}.amazonaws.com/${AWS::AccountId}
          EMR_APPLICATION_ID: !Ref SparkApp
          EMR_EXECUTION_ROLE_ARN: !GetAtt rEMRServerlessRole.Arn
      Description: Send S3 Put Events to a specific queue according a table
      MemorySize: 2048
      Timeout: 600
      Role: !GetAtt rLambdaRole.Arn

  rTriggerEMRJobsLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./lambda/trigger-emr-jobs/src
      FunctionName: !Sub sdlf-${pTeamName}-${pPipeline}-stage-b-trigger-emr-jobs
      Environment:
        Variables:
          AthenaBucket: !Sub "{{resolve:ssm:/SDLF/S3/AthenaBucket:1}}"
          ENV: !Sub ${pEnv}
          AID: !Sub "${AWS::AccountId}"
          REG: !Sub "${AWS::Region}"
          stage: !Sub guay_jocker_db_${pEnv}_stage
          dwh: !Sub dwh_${pEnv}_guay
          ARTIFACTORY_BUCKET_NAME: !Sub guay-datalake-${pEnv}-${AWS::Region}-${AWS::AccountId}-artifactory
          STAGE_BUCKET_NAME: !Sub guay-datalake-${pEnv}-${AWS::Region}-${AWS::AccountId}-stage
          SQS_QUEUE_URL: !Sub https://sqs.${AWS::Region}.amazonaws.com/${AWS::AccountId}
          EMR_APPLICATION_ID: !Ref SparkApp
          EMR_EXECUTION_ROLE_ARN: !GetAtt rEMRServerlessRole.Arn
      Description: Trigger EMR jobs for multiple tables 
      MemorySize: 2048
      Timeout: 600
      ReservedConcurrentExecutions: 1
      Role: !GetAtt rLambdaRole.Arn

  rS3NotificationLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda_function.lambda_handler
      Role: !GetAtt rLambdaRole.Arn
      FunctionName: !Sub sdlf-${pTeamName}-${pPipeline}-stage-b-s3-notifications
      CodeUri: ./lambda/create-s3-notifications/src
      MemorySize: 128
      Timeout: 600

  rBrgCanalizationCollabQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub sdlf-${pTeamName}-brg_canalization_collab_queue.fifo
      FifoQueue: true
      ContentBasedDeduplication: true
      DeduplicationScope: "messageGroup"  # Enables deduplication based on Message Group
      FifoThroughputLimit: "perQueue"
      VisibilityTimeout: 960 # 16 minutes (16 * 60 seconds)
      MessageRetentionPeriod: 172800 # 2 days (2 * 24 * 60 * 60 seconds)
      DelaySeconds: 0
      MaximumMessageSize: 262144 # 256 KB
      ReceiveMessageWaitTimeSeconds: 0
      SqsManagedSseEnabled: true
      RedrivePolicy: !Ref AWS::NoValue # No DLQ specified in image

  rBrgCanalizationCollabQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref rBrgCanalizationCollabQueue
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "__owner_statement"
            Effect: "Allow"
            Principal:
              AWS: "arn:aws:iam::540362671753:root"
            Action: "SQS:*"
            Resource: !GetAtt rBrgCanalizationCollabQueue.Arn

  rBrgCanalizationCollabQueueMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt rBrgCanalizationCollabQueue.Arn
      FunctionName: !GetAtt rTriggerEMRJobsLambda.Arn
      Enabled: true
      BatchSize: 1
      MaximumBatchingWindowInSeconds: 0

  SparkApp:
    Type: AWS::EMRServerless::Application
    Properties:
      Name: NewSparkApp
      ReleaseLabel: emr-6.12.0
      Type: Spark
      Architecture: X86_64
      AutoStartConfiguration:
        Enabled: true
      AutoStopConfiguration:
        Enabled: true
        IdleTimeoutMinutes: 15
      MaximumCapacity:
         Cpu: "32 vCPU"
         Memory: "128 GB"

  rS3InvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn: rSendS3EventsToFIFOQueueLambda
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref rSendS3EventsToFIFOQueueLambda
      Principal: "s3.amazonaws.com"
      SourceArn: !Sub "arn:aws:s3:::guay-datalake-${pEnv}-${AWS::Region}-${AWS::AccountId}-raw"

  rCdcNotification:
    Type: AWS::CloudFormation::CustomResource
    DependsOn: rSendS3EventsToFIFOQueueLambda
    Properties:
      ServiceToken:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":lambda:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: rS3NotificationLambda
      BucketName: !Sub guay-datalake-${pEnv}-${AWS::Region}-${AWS::AccountId}-raw
      NotificationConfiguration:
        LambdaFunctionConfigurations:
          - Id: !Sub "${pPipeline}"
            Events:
              - s3:ObjectCreated:*
            Filter:
              Key:
                FilterRules:
                  - Name: Prefix
                    Value: "guay_jocker_db"
                  - Name: Suffix
                    Value: ".parquet"
            LambdaFunctionArn:
              Fn::GetAtt:
                - rSendS3EventsToFIFOQueueLambda
                - Arn
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete

  rEMRServerlessRoleDatabaseLakeFormationPermission:
    Type: AWS::LakeFormation::Permissions
    Properties:
      DataLakePrincipal:
        DataLakePrincipalIdentifier: !GetAtt rEMRServerlessRole.Arn
      Permissions:
        - CREATE_TABLE
        - ALTER
        - DROP
      Resource:
        DatabaseResource:
          Name: !Sub hudi_database

  rEMRServerlessRoleTablesLFPermission:
    Type: AWS::LakeFormation::Permissions
    Properties:
      DataLakePrincipal:
        DataLakePrincipalIdentifier: !GetAtt rEMRServerlessRole.Arn
      Permissions:
        - ALL
        - ALTER
        - DELETE
        - DESCRIBE
        - DROP
        - INSERT
        - SELECT
      Resource:
        TableResource:
          DatabaseName: !Sub hudi_database
          TableWildcard: 
            {}

  rEMRServerlessRoleDataLocationLFPermission:
    Type: AWS::LakeFormation::Permissions
    Properties:
      DataLakePrincipal:
        DataLakePrincipalIdentifier: !GetAtt rEMRServerlessRole.Arn
      Permissions:
        - DATA_LOCATION_ACCESS
      Resource:
        DataLocationResource:
          S3Resource: !Sub arn:aws:s3:::guay-datalake-${pEnv}-${AWS::Region}-${AWS::AccountId}-stage
